vec![
    (
        "entry".to_owned(),
        vec![
            Instruction::Mov(1, Value::Word(WordValue::Integer(1))),
            Instruction::BranchNonZero(1, Value::Word(WordValue::Label("does_nothing".to_owned()))),
            Instruction::Malloc(1, 1),
        ],
        Terminal::Jump(Value::Word(WordValue::Label("does_nothing".to_owned()))),
    ),
    (
        "does_nothing".to_owned(),
        vec![],
        Terminal::Halt,
    ), 
]
- dont want the jumps to put any bounds on does_nothing


// vec![
//     (
//         "entry".to_owned(),
//         vec![
//             Instruction::Mov(1, Value::Word(WordValue::Integer(1))),
//             Instruction::BranchNonZero(1, Value::Word(WordValue::Label("case2".to_owned()))),
//             Instruction::Mov(2, Value::Word(WordValue::Label("doA".to_owned()))),
//         ],
//         Terminal::Jump(Value::Word(WordValue::Label("go".to_owned()))),
//     ),
//     (
//         "case2".to_owned(),
//         vec![
//             Instruction::Mov(2, Value::Word(WordValue::Label("doB".to_owned()))),
//         ],
//         Terminal::Jump(Value::Word(WordValue::Label("go".to_owned()))),
//     ), 

//     (
//         "go".to_owned(),
//         vec![
//             Instruction::Mov(1, Value::Word(WordValue::Integer(1))),
//             Instruction::Mov(3, Value::Word(WordValue::Integer(1))),
//         ],
//         Terminal::Jump(Value::Register(2)),
//     ),
//     (
//         "doA".to_owned(),
//         vec![Instruction::Arith(Op::Add, 1, 1, Value::Register(3))],
//         Terminal::Halt,
//     ),
//     (
//         "doB".to_owned(),
//         vec![Instruction::Arith(Op::Sub, 1, 1, Value::Register(3))],
//         Terminal::Halt,
//     ),
// ]

- want the jump in go to bound the code parameter of r1


temporary fix:
- bound indirect jumps, but not direct jumps (lmao)

# another case

case 1 indirect jump

indirect jump, takes a code in r1
sets r2
jumps to r1

want:
- we want to accept functions that either require r2 or dont
- so r1 should have the most generic type, which is the one with Code<r2: int>
- we want to constrain the code type in the jump

case 2 direct jump

sets r2
jumps to label

want:
- we want to check if we can legally jump to the label
- so that the label either requires r2 or doesnt require anything
- we don't want to constrain the code type in the jump because that enforces a precondition on the label
  - but i guess thats what the let poly is for???

# let poly??

let poly -> create a copy of a label type, add a secondary set of constraints that the new label will match the original later

the issue is that we _still_ cant always constrain jumps
- indirect jumps will still create infinite recursive types

how to fix??
- force equality in all cases _except_ when we have a code type


## let poly plan
- whenver a label is requested, create a new code type, remember it in a mapping of label->code types
- force equality in jumps except on code types
  - the let poly'd code types will then include all information that we know before we jump
- unify
- close over the new let-poly mapping
- for each label
  - grab its actual type
  - grab all the code types (correspond with all the information that we know before each instance of the jump)
  - ensure that the jumps are in fact satisfiable

plan
- have two code types
  - one that we have now Code(CodeTy)
  - one for lifting to foralltype PolyCode(Hashmap<Register, Type or TypeVar>)
    - i guess this should be done for all code types in the program after unification????
    - the big difference is just interpreting equality of code vs polycode is very different (i think?)
    - polycode equality, one by one on registers
      - typevar can equal typevar (both are universal types)
- or maybe this entire thing should be refactored to MustBeGeneric instead of typevar or smth like that????
- jsut refactoring code to properly mean something besides this typevar nonsense
  - post let-poly code type as a map from Hashmap<Register, Requires>
  enum Requires {
    Set(Ty),
    Nothing,
  }
  - maybe all the code types should be like that ????
    - ifasldfjasldfjksldfj

plan
- after unification map unifvars to
  - Some(Ty)
  - Any/None/Unbounded/something like that
- during jumps, save the current gamma and the CodeTy
  - do a subtype satisfiable after
  - do the same on the let poly instances

So
- rip out all the changes to unifier
- rip out typevars entirely
- make close_mapping do the mapping after unification to ^
- bring back the satisfy/subtyping stuff