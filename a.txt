--- Heap w/ mapping ---
entry => 
  1: TyVar(1)
  2: TyVar(2)
  3: TyVar(3)
indirect_jump => 
  1: Code({1: TyVar(13), 2: Int, 3: TyVar(15)})
  2: TyVar(5)
  3: TyVar(6)
poly_halt => 
  1: TyVar(7)
  2: TyVar(8)
  3: TyVar(9)
The parameter we're trying to pass it <: what the function is expecting
---
Code({3: TyVar(9), 2: TyVar(8), 1: TyVar(7)}) <: Code({3: TyVar(15), 1: TyVar(13), 2: Int})
TyVar(2) <: TyVar(5)
TyVar(3) <: TyVar(6)
> Failed satisfy_jump on: (TyVar(8), Int)
Res Err(FailedUnify)


--- Heap w/ mapping ---
doA => 
  1: Int
  2: TyVar(11)
  3: Int
doB => 
  1: Int
  2: TyVar(14)
  3: Int
entry => 
  1: TyVar(1)
  2: TyVar(2)
  3: TyVar(3)
case2 => 
  1: TyVar(4)
  2: TyVar(5)
  3: TyVar(6)
go => 
  1: TyVar(7)
  2: Code({3: Int, 1: Int, 2: TyVar(26)})
  3: TyVar(9)
The parameter we're trying to pass it <: what the function is expecting
---
TyVar(2) <: TyVar(5)
TyVar(3) <: TyVar(6)
[TyVar(5)=TyVar(2), TyVar(6)=TyVar(3), ]
---
Code({3: Int, 1: Int, 2: TyVar(11)}) <: Code({1: Int, 2: TyVar(26), 3: Int})
TyVar(3) <: TyVar(9)
[TyVar(26)=TyVar(11), TyVar(9)=TyVar(3), ]
---
TyVar(4) <: TyVar(7)
Code({1: Int, 2: TyVar(14), 3: Int}) <: Code({3: Int, 2: TyVar(26), 1: Int})
TyVar(6) <: TyVar(9)
[TyVar(9)=TyVar(6), TyVar(7)=TyVar(4), TyVar(26)=TyVar(14), ]
---
Code({2: TyVar(26), 1: Int, 3: Int}) <: TyVar(26)
[TyVar(26)=Code({2: TyVar(26), 1: Int, 3: Int}), ]
Res Ok(())